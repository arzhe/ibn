// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: intend.proto

#ifndef PROTOBUF_INCLUDED_intend_2eproto
#define PROTOBUF_INCLUDED_intend_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_intend_2eproto 

namespace protobuf_intend_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_intend_2eproto
namespace intend {
class IntendReply;
class IntendReplyDefaultTypeInternal;
extern IntendReplyDefaultTypeInternal _IntendReply_default_instance_;
class IntendRequest;
class IntendRequestDefaultTypeInternal;
extern IntendRequestDefaultTypeInternal _IntendRequest_default_instance_;
class PolicyInfo;
class PolicyInfoDefaultTypeInternal;
extern PolicyInfoDefaultTypeInternal _PolicyInfo_default_instance_;
class RealtimeInfo;
class RealtimeInfoDefaultTypeInternal;
extern RealtimeInfoDefaultTypeInternal _RealtimeInfo_default_instance_;
}  // namespace intend
namespace google {
namespace protobuf {
template<> ::intend::IntendReply* Arena::CreateMaybeMessage<::intend::IntendReply>(Arena*);
template<> ::intend::IntendRequest* Arena::CreateMaybeMessage<::intend::IntendRequest>(Arena*);
template<> ::intend::PolicyInfo* Arena::CreateMaybeMessage<::intend::PolicyInfo>(Arena*);
template<> ::intend::RealtimeInfo* Arena::CreateMaybeMessage<::intend::RealtimeInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace intend {

// ===================================================================

class IntendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:intend.IntendRequest) */ {
 public:
  IntendRequest();
  virtual ~IntendRequest();

  IntendRequest(const IntendRequest& from);

  inline IntendRequest& operator=(const IntendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntendRequest(IntendRequest&& from) noexcept
    : IntendRequest() {
    *this = ::std::move(from);
  }

  inline IntendRequest& operator=(IntendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntendRequest* internal_default_instance() {
    return reinterpret_cast<const IntendRequest*>(
               &_IntendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IntendRequest* other);
  friend void swap(IntendRequest& a, IntendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntendRequest* New() const final {
    return CreateMaybeMessage<IntendRequest>(NULL);
  }

  IntendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntendRequest& from);
  void MergeFrom(const IntendRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request = 1;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // @@protoc_insertion_point(class_scope:intend.IntendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_intend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntendReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:intend.IntendReply) */ {
 public:
  IntendReply();
  virtual ~IntendReply();

  IntendReply(const IntendReply& from);

  inline IntendReply& operator=(const IntendReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntendReply(IntendReply&& from) noexcept
    : IntendReply() {
    *this = ::std::move(from);
  }

  inline IntendReply& operator=(IntendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntendReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntendReply* internal_default_instance() {
    return reinterpret_cast<const IntendReply*>(
               &_IntendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IntendReply* other);
  friend void swap(IntendReply& a, IntendReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntendReply* New() const final {
    return CreateMaybeMessage<IntendReply>(NULL);
  }

  IntendReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntendReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntendReply& from);
  void MergeFrom(const IntendReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntendReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_reply(::std::string&& value);
  #endif
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:intend.IntendReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_intend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealtimeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:intend.RealtimeInfo) */ {
 public:
  RealtimeInfo();
  virtual ~RealtimeInfo();

  RealtimeInfo(const RealtimeInfo& from);

  inline RealtimeInfo& operator=(const RealtimeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealtimeInfo(RealtimeInfo&& from) noexcept
    : RealtimeInfo() {
    *this = ::std::move(from);
  }

  inline RealtimeInfo& operator=(RealtimeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealtimeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealtimeInfo* internal_default_instance() {
    return reinterpret_cast<const RealtimeInfo*>(
               &_RealtimeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RealtimeInfo* other);
  friend void swap(RealtimeInfo& a, RealtimeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealtimeInfo* New() const final {
    return CreateMaybeMessage<RealtimeInfo>(NULL);
  }

  RealtimeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RealtimeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RealtimeInfo& from);
  void MergeFrom(const RealtimeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealtimeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rtinfo = 1;
  void clear_rtinfo();
  static const int kRtinfoFieldNumber = 1;
  const ::std::string& rtinfo() const;
  void set_rtinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_rtinfo(::std::string&& value);
  #endif
  void set_rtinfo(const char* value);
  void set_rtinfo(const char* value, size_t size);
  ::std::string* mutable_rtinfo();
  ::std::string* release_rtinfo();
  void set_allocated_rtinfo(::std::string* rtinfo);

  // @@protoc_insertion_point(class_scope:intend.RealtimeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rtinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_intend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PolicyInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:intend.PolicyInfo) */ {
 public:
  PolicyInfo();
  virtual ~PolicyInfo();

  PolicyInfo(const PolicyInfo& from);

  inline PolicyInfo& operator=(const PolicyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolicyInfo(PolicyInfo&& from) noexcept
    : PolicyInfo() {
    *this = ::std::move(from);
  }

  inline PolicyInfo& operator=(PolicyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyInfo* internal_default_instance() {
    return reinterpret_cast<const PolicyInfo*>(
               &_PolicyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PolicyInfo* other);
  friend void swap(PolicyInfo& a, PolicyInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolicyInfo* New() const final {
    return CreateMaybeMessage<PolicyInfo>(NULL);
  }

  PolicyInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PolicyInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PolicyInfo& from);
  void MergeFrom(const PolicyInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pinfo = 1;
  void clear_pinfo();
  static const int kPinfoFieldNumber = 1;
  const ::std::string& pinfo() const;
  void set_pinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_pinfo(::std::string&& value);
  #endif
  void set_pinfo(const char* value);
  void set_pinfo(const char* value, size_t size);
  ::std::string* mutable_pinfo();
  ::std::string* release_pinfo();
  void set_allocated_pinfo(::std::string* pinfo);

  // @@protoc_insertion_point(class_scope:intend.PolicyInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_intend_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntendRequest

// string request = 1;
inline void IntendRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IntendRequest::request() const {
  // @@protoc_insertion_point(field_get:intend.IntendRequest.request)
  return request_.GetNoArena();
}
inline void IntendRequest::set_request(const ::std::string& value) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:intend.IntendRequest.request)
}
#if LANG_CXX11
inline void IntendRequest::set_request(::std::string&& value) {
  
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:intend.IntendRequest.request)
}
#endif
inline void IntendRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:intend.IntendRequest.request)
}
inline void IntendRequest::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:intend.IntendRequest.request)
}
inline ::std::string* IntendRequest::mutable_request() {
  
  // @@protoc_insertion_point(field_mutable:intend.IntendRequest.request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IntendRequest::release_request() {
  // @@protoc_insertion_point(field_release:intend.IntendRequest.request)
  
  return request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IntendRequest::set_allocated_request(::std::string* request) {
  if (request != NULL) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:intend.IntendRequest.request)
}

// -------------------------------------------------------------------

// IntendReply

// string reply = 1;
inline void IntendReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IntendReply::reply() const {
  // @@protoc_insertion_point(field_get:intend.IntendReply.reply)
  return reply_.GetNoArena();
}
inline void IntendReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:intend.IntendReply.reply)
}
#if LANG_CXX11
inline void IntendReply::set_reply(::std::string&& value) {
  
  reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:intend.IntendReply.reply)
}
#endif
inline void IntendReply::set_reply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:intend.IntendReply.reply)
}
inline void IntendReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:intend.IntendReply.reply)
}
inline ::std::string* IntendReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:intend.IntendReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IntendReply::release_reply() {
  // @@protoc_insertion_point(field_release:intend.IntendReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IntendReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:intend.IntendReply.reply)
}

// -------------------------------------------------------------------

// RealtimeInfo

// string rtinfo = 1;
inline void RealtimeInfo::clear_rtinfo() {
  rtinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealtimeInfo::rtinfo() const {
  // @@protoc_insertion_point(field_get:intend.RealtimeInfo.rtinfo)
  return rtinfo_.GetNoArena();
}
inline void RealtimeInfo::set_rtinfo(const ::std::string& value) {
  
  rtinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:intend.RealtimeInfo.rtinfo)
}
#if LANG_CXX11
inline void RealtimeInfo::set_rtinfo(::std::string&& value) {
  
  rtinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:intend.RealtimeInfo.rtinfo)
}
#endif
inline void RealtimeInfo::set_rtinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rtinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:intend.RealtimeInfo.rtinfo)
}
inline void RealtimeInfo::set_rtinfo(const char* value, size_t size) {
  
  rtinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:intend.RealtimeInfo.rtinfo)
}
inline ::std::string* RealtimeInfo::mutable_rtinfo() {
  
  // @@protoc_insertion_point(field_mutable:intend.RealtimeInfo.rtinfo)
  return rtinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealtimeInfo::release_rtinfo() {
  // @@protoc_insertion_point(field_release:intend.RealtimeInfo.rtinfo)
  
  return rtinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealtimeInfo::set_allocated_rtinfo(::std::string* rtinfo) {
  if (rtinfo != NULL) {
    
  } else {
    
  }
  rtinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtinfo);
  // @@protoc_insertion_point(field_set_allocated:intend.RealtimeInfo.rtinfo)
}

// -------------------------------------------------------------------

// PolicyInfo

// string pinfo = 1;
inline void PolicyInfo::clear_pinfo() {
  pinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyInfo::pinfo() const {
  // @@protoc_insertion_point(field_get:intend.PolicyInfo.pinfo)
  return pinfo_.GetNoArena();
}
inline void PolicyInfo::set_pinfo(const ::std::string& value) {
  
  pinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:intend.PolicyInfo.pinfo)
}
#if LANG_CXX11
inline void PolicyInfo::set_pinfo(::std::string&& value) {
  
  pinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:intend.PolicyInfo.pinfo)
}
#endif
inline void PolicyInfo::set_pinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:intend.PolicyInfo.pinfo)
}
inline void PolicyInfo::set_pinfo(const char* value, size_t size) {
  
  pinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:intend.PolicyInfo.pinfo)
}
inline ::std::string* PolicyInfo::mutable_pinfo() {
  
  // @@protoc_insertion_point(field_mutable:intend.PolicyInfo.pinfo)
  return pinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyInfo::release_pinfo() {
  // @@protoc_insertion_point(field_release:intend.PolicyInfo.pinfo)
  
  return pinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyInfo::set_allocated_pinfo(::std::string* pinfo) {
  if (pinfo != NULL) {
    
  } else {
    
  }
  pinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pinfo);
  // @@protoc_insertion_point(field_set_allocated:intend.PolicyInfo.pinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace intend

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_intend_2eproto
