// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: intend.proto

#include "intend.pb.h"
#include "intend.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace intend {

static const char* Intend_method_names[] = {
  "/intend.Intend/IntendChat",
  "/intend.Intend/IntChat",
};

std::unique_ptr< Intend::Stub> Intend::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Intend::Stub> stub(new Intend::Stub(channel));
  return stub;
}

Intend::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_IntendChat_(Intend_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_IntChat_(Intend_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::intend::IntendRequest, ::intend::IntendReply>* Intend::Stub::IntendChatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::intend::IntendRequest, ::intend::IntendReply>::Create(channel_.get(), rpcmethod_IntendChat_, context);
}

::grpc::ClientAsyncReaderWriter< ::intend::IntendRequest, ::intend::IntendReply>* Intend::Stub::AsyncIntendChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::intend::IntendRequest, ::intend::IntendReply>::Create(channel_.get(), cq, rpcmethod_IntendChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::intend::IntendRequest, ::intend::IntendReply>* Intend::Stub::PrepareAsyncIntendChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::intend::IntendRequest, ::intend::IntendReply>::Create(channel_.get(), cq, rpcmethod_IntendChat_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::intend::RealtimeInfo, ::intend::PolicyInfo>* Intend::Stub::IntChatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::intend::RealtimeInfo, ::intend::PolicyInfo>::Create(channel_.get(), rpcmethod_IntChat_, context);
}

::grpc::ClientAsyncReaderWriter< ::intend::RealtimeInfo, ::intend::PolicyInfo>* Intend::Stub::AsyncIntChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::intend::RealtimeInfo, ::intend::PolicyInfo>::Create(channel_.get(), cq, rpcmethod_IntChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::intend::RealtimeInfo, ::intend::PolicyInfo>* Intend::Stub::PrepareAsyncIntChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::intend::RealtimeInfo, ::intend::PolicyInfo>::Create(channel_.get(), cq, rpcmethod_IntChat_, context, false, nullptr);
}

Intend::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Intend_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Intend::Service, ::intend::IntendRequest, ::intend::IntendReply>(
          std::mem_fn(&Intend::Service::IntendChat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Intend_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Intend::Service, ::intend::RealtimeInfo, ::intend::PolicyInfo>(
          std::mem_fn(&Intend::Service::IntChat), this)));
}

Intend::Service::~Service() {
}

::grpc::Status Intend::Service::IntendChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::intend::IntendReply, ::intend::IntendRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Intend::Service::IntChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::intend::PolicyInfo, ::intend::RealtimeInfo>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace intend

